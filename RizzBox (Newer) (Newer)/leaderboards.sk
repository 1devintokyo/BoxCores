options:
    format: &a@place. &e@index &7- &6@value
    entriesPerPage: 10

import:
    java.util.ArrayList
    java.util.HashMap
    java.util.Map$Entry

function top_replace(e1: strings, e2: strings, e3: string) :: string:
    set {_string} to {_e3}
    loop {_e1::*}:
        add 1 to {_index}
        replace all "%loop-value%" with "%{_index}th element of {_e2::*}%" in {_string}
    return {_string}

on death:
    victim is a player
    add 1 to {stats::%victim%::deaths}

    set {_killer} to victim.getKiller()
    {_killer} is a player
    add 1 to {stats::%attacker%::kills}

function sortLeaderboards():
    create new section and store it in {_sect}:
        set {_kills} to new HashMap()
        set {_deaths} to new HashMap()
        set {_kdr} to new HashMap()
        loop indexes of {stats::*}:
            if {stats::%loop-value%::kills} is set:
                {_kills}.put(loop-value, {stats::%loop-value%::kills})
                {stats::%loop-value%::deaths} > 0
                {_kdr}.put(loop-value, {stats::%loop-value%::kills} / {stats::%loop-value%::deaths})
            if {stats::%loop-value%::deaths} is set:
                {_deaths}.put(loop-value, {stats::%loop-value%::deaths})
        
        set {_killsl} to new ArrayList({_kills}.entrySet())
        {_kills}.clear()
        {_killsl}.sort(Entry.comparingByValue().reversed())

        set {_deathsl} to new ArrayList({_deaths}.entrySet())
        {_deaths}.clear()
        {_deathsl}.sort(Entry.comparingByValue().reversed())

        set {_kdrl} to new ArrayList({_kdr}.entrySet())
        {_kdr}.clear()
        {_kdrl}.sort(Entry.comparingByValue().reversed())
        
        delete {top::kills::*}
        set {_index} to 0
        loop ...{_killsl}:
            "%loop-value.getValue()%" is not "0"
            "%loop-value.getKey()%" is not "<none>"
            add 1 to {_index}
            set {top::kills::%{_index}%} to top_replace(("@place", "@index" and "@value"), ("%{_index}%", "%top_fix_name(loop-value.getKey())%" and "%loop-value.getValue()%"), "{@format} Kills")
            {_index} is 100
            stop loop
        {_killsl}.clear()
        
        delete {top::deaths::*}
        set {_index} to 0
        loop ...{_deathsl}:
            "%loop-value.getValue()%" is not "0"
            "%loop-value.getKey()%" is not "<none>"
            add 1 to {_index}
            set {top::deaths::%{_index}%} to top_replace(("@place", "@index" and "@value"), ("%{_index}%", "%top_fix_name(loop-value.getKey())%" and "%loop-value.getValue()%"), "{@format} Deaths")
            {_index} is 100
            stop loop
        {_deathsl}.clear()
        
        delete {top::kdr::*}
        set {_index} to 0
        loop ...{_kdrl}:
            "%loop-value.getValue()%" is not "0"
            "%loop-value.getKey()%" is not "<none>"
            add 1 to {_index}
            set {top::kdr::%{_index}%} to top_replace(("@place", "@index" and "@value"), ("%{_index}%", "%top_fix_name(loop-value.getKey())%" and "%loop-value.getValue()%"), "{@format} KDR")
            {_index} is 100
            stop loop
        {_kdrl}.clear()
    run section {_sect} async

function sortClanLeaderboards():
    create new section and store it in {_sect}:
        set {_kills} to new HashMap()
        set {_deaths} to new HashMap()
        set {_kdr} to new HashMap()
        loop indexes of {server::clans::clans::*}:
            if {server::clans::clans::%loop-value%::kills} is set:
                {_kills}.put(loop-value, {server::clans::clans::%loop-value%::kills})
                {erver::clans::clans::%loop-value%::deaths} > 0
                {_kdr}.put(loop-value, {server::clans::clans::%loop-value%::kills} / {server::clans::clans::%loop-value%::deaths})
            if {server::clans::clans::%loop-value%::deaths} is set:
                {_deaths}.put(loop-value, {server::clans::clans::%loop-value%::deaths})
        
        set {_killsl} to new ArrayList({_kills}.entrySet())
        {_kills}.clear()
        {_killsl}.sort(Entry.comparingByValue().reversed())

        set {_deathsl} to new ArrayList({_deaths}.entrySet())
        {_deaths}.clear()
        {_deathsl}.sort(Entry.comparingByValue().reversed())

        set {_kdrl} to new ArrayList({_kdr}.entrySet())
        {_kdr}.clear()
        {_kdrl}.sort(Entry.comparingByValue().reversed())
        
        delete {top::clankills::*}
        set {_index} to 0
        loop ...{_killsl}:
            "%loop-value.getValue()%" is not "0"
            "%loop-value.getKey()%" is not "<none>"
            add 1 to {_index}
            set {top::clankills::%{_index}%} to top_replace(("@place", "@index" and "@value"), ("%{_index}%", "%top_fix_name(loop-value.getKey())%" and "%loop-value.getValue()%"), "&a@place. &9@index &7- &e@value Kills")
            {_index} is 100
            stop loop
        {_killsl}.clear()
        
        delete {top::clandeaths::*}
        set {_index} to 0
        loop ...{_deathsl}:
            "%loop-value.getValue()%" is not "0"
            "%loop-value.getKey()%" is not "<none>"
            add 1 to {_index}
            set {top::clandeaths::%{_index}%} to top_replace(("@place", "@index" and "@value"), ("%{_index}%", "%top_fix_name(loop-value.getKey())%" and "%loop-value.getValue()%"), "{@format} Deaths")
            {_index} is 100
            stop loop
        {_deathsl}.clear()
        
        delete {top::clankdr::*}
        set {_index} to 0
        loop ...{_kdrl}:
            "%loop-value.getValue()%" is not "0"
            "%loop-value.getKey()%" is not "<none>"
            add 1 to {_index}
            set {top::clankdr::%{_index}%} to top_replace(("@place", "@index" and "@value"), ("%{_index}%", "%top_fix_name(loop-value.getKey())%" and "%loop-value.getValue()%"), "{@format} KDR")
            {_index} is 100
            stop loop
        {_kdrl}.clear()
    run section {_sect} async

every 5 minutes:
    sortLeaderboards()
    sortClanLeaderboards()

function top_fix_page(type: string, page: integer) :: integer:
    if {_page} < 1:
        set {_page} to 1
    if {_page} > ceil(size of {top::%{_type}%::*} / {@entriesPerPage}):
        set {_page} to ceil(size of {top::%{_type}%::*} / {@entriesPerPage})
    return {_page}

function top_send(p: player, type: string, page: integer):
    set {_offset} to ({_page} - 1) * {@entriesPerPage}
    loop {@entriesPerPage} times:
        message {top::%{_type}%::%loop-value + {_offset}%} to {_p}

command /killtop [<integer>]:
    aliases: topkill, topkills, killstop, leaderboard, leaderboards, killsleaderboard
    trigger:
        set {_page} to top_fix_page("kills", ((arg-1) if arg-1 is set else 1))
        message "&7------ &e&lKill Leaderboard &6&l(Page %{_page}%)&7 ------"
        message " "
        top_send(player, "kills", {_page})
        message " "
        message "&7-------------------------------------"

command /deathtop [<integer>]:
    aliases: topdeath, topdeaths, deathstop, deathleaderboard
    trigger:
        set {_page} to top_fix_page("deaths", ((arg-1) if arg-1 is set else 1))
        message "&7------ &e&lDeath Leaderboard &6&l(Page %{_page}%)&7 ------"
        message " "
        top_send(player, "deaths", {_page})
        message " "
        message "&7----------------------------------------"

command /kdrtop [<integer>]:
    aliases: topkdr, kdrleaderboard
    trigger:
        set {_page} to top_fix_page("kdr", ((arg-1) if arg-1 is set else 1))
        message "&7------ &e&lKDR Leaderboard &6&l(Page %{_page}%)&7 ------"
        message " "
        top_send(player, "kdr", {_page})
        message " "
        message "&7--------------------------------------"

command /setstat <offlineplayer> <text> <integer>:
    permission: top.setstat
    trigger:
        if ("kills" and "deaths") does not contain arg-2:
            message "&cIncorrect usage: /setstat <player> <kills|deaths> <value>"
            stop
        
        set {stats::%arg-1%::%arg-2%} to arg-3
        message "&aSet %arg-2% for %arg-1% to %arg-3%"

on placeholderapi placeholder request for the prefix "stats":
    if identifier is "kills":
        set result to "%{stats::%player%::kills} if {stats::%player%::kills} is set else 0%"
    else if identifier is "deaths":
        set result to "%{stats::%player%::deaths} if {stats::%player%::deaths} is set else 0%"
    else if identifier is "kdr":
        if {stats::%player%::kills} is not set:
            set result to "N/A"
        else if {stats::%player%::deaths} is not set:
            set result to "N/A"
        else if {stats::%player%::deaths} = 0:
            set result to "N/A"
        else:
            set result to "%{stats::%player%::kills} / {stats::%player%::deaths}%"
    else if identifier starts with "top":
        set {_stat} to 2nd element out of (identifier split at "_")
        set {_position} to 3rd element out of (identifier split at "_")
        if {top::%{_stat}%::%{_position}%} is set:
            set result to {top::%{_stat}%::%{_position}%}
        else:
            set result to " "
            
command /forcesort:
    permission: top.forcesort
    trigger:
        message "&aSorting leaderboards, please don't spam the command."
        sortLeaderboards()
        sortClanLeaderboards()

function top_fix_name(s: string) :: string:
    set {_p} to "%{_s} parsed as offlineplayer%"
    if {_p} is "<none>":
        return {_s}
    return {_p}

command /resetlb:
	permission: *
	trigger:
		make player say "!delete {stats::*}"
		send "&aSuccessfully reset leaderboards."
on tab complete:
	event-string is "/setstat"
	set tab completions for position 2 to "kills" and "deaths"